/**
 *  @copyright MIT License 2018 Ajeet Wankhede
 *  @file    Map.hpp
 *  @author  Ajeet Wankhede
 *  @date    11/09/2018
 *  @version 1.0
 *  @brief   Discrete planner for motion planning
 *  @section DESCRIPTION
 *  Map class declaration.
 */

#ifndef INCLUDE_MAP_HPP_
#define INCLUDE_MAP_HPP_

#include <map>
#include <vector>
#include <utility>

/**
 * @brief Declaring class attributes and methods
 */
class Map {
 public:
  /**
   * @brief Constructor
   */
  Map();

  /**
   * @brief Destructor
   */
  virtual ~Map();

  /**
   *   @brief Call this method to display the world
   *   @param vector of pair of int value of the path generated by the planner
   *   @return none
   */
  void showMap(std::vector<std::pair<int, int> > path);

  /**
   *   @brief Verify the given node if it is not visited for the planner
   *   @param map of pair of int containing the visited nodes
   *   @param pair of int of the node to be checked
   *   @return bool value specifying valid or invalid nodes
   */
  bool verifyNodes(std::map<std::pair<int, int>, int> visitedNodes,
                   std::pair<int, int> node);

  /**
   *   @brief Decide which action to take in the A* algorithm
   *   @param int value to decide which action to take
   *   @param pair of int value of current node
   *   @return pair of int value specifying new node
   */
  std::pair<int, int> action(int i, std::pair<int, int> currentNode);

  int length, width;
  std::vector<std::vector<int> > world;
  std::pair<int, int> startNode;
  std::pair<int, int> endNode;
};

#endif  // INCLUDE_MAP_HPP_
